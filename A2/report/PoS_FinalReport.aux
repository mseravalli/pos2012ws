\relax 
\ifx\hyper@anchor\@undefined
\global \let \oldcontentsline\contentsline
\gdef \contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global \let \oldnewlabel\newlabel
\gdef \newlabel#1#2{\newlabelxx{#1}#2}
\gdef \newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\let \contentsline\oldcontentsline
\let \newlabel\oldnewlabel}
\else
\global \let \hyper@last\relax 
\fi

\@writefile{toc}{\contentsline {section}{\numberline {1}Introduction}{1}{section.1}}
\@writefile{toc}{\contentsline {section}{\numberline {2}Sequential optimization}{2}{section.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Execution time for each phase. }}{2}{figure.1}}
\newlabel{fig:exec_time}{{1}{2}{Execution time for each phase. \label {fig:exec_time}\relax }{figure.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces L2 cache miss rate. }}{3}{figure.2}}
\newlabel{fig:cache_misses}{{2}{3}{L2 cache miss rate. \label {fig:cache_misses}\relax }{figure.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces  Execution time of the input phase in relation to the input file size.  }}{3}{figure.3}}
\newlabel{fig:io}{{3}{3}{ Execution time of the input phase in relation to the input file size. \label {fig:io} \relax }{figure.3}{}}
\@writefile{toc}{\contentsline {section}{\numberline {3}Benchmark parallelization}{4}{section.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces  How elements are stored within the local to global index.  }}{6}{figure.4}}
\newlabel{fig:array}{{4}{6}{ How elements are stored within the local to global index. \label {fig:array} \relax }{figure.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Performance analysis and tuning}{7}{section.4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces  Times in $\mu sec$ of the single parts of Cojack input run on multiple processes using the common partitioning algorithm.  }}{10}{figure.5}}
\newlabel{fig:cojack_common_1-64}{{5}{10}{ Times in $\mu sec$ of the single parts of Cojack input run on multiple processes using the common partitioning algorithm. \label {fig:cojack_common_1-64} \relax }{figure.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {5}Overview}{10}{section.5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces  Times in $\mu sec$ of the single parts of Cojack input run on multiple processes using the dual partitioning algorithm.  }}{11}{figure.6}}
\newlabel{fig:cojack_dual_1-64}{{6}{11}{ Times in $\mu sec$ of the single parts of Cojack input run on multiple processes using the dual partitioning algorithm. \label {fig:cojack_dual_1-64} \relax }{figure.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces  Scaling for computational loop for Cojack input run on multiple processes using the common partitioning algorithm.  }}{11}{figure.7}}
\newlabel{fig:scaling_cojack_common_1-64}{{7}{11}{ Scaling for computational loop for Cojack input run on multiple processes using the common partitioning algorithm. \label {fig:scaling_cojack_common_1-64} \relax }{figure.7}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces  Scaling for computational loop for Cojack input run on multiple processes using the dual partitioning algorithm.  }}{12}{figure.8}}
\newlabel{fig:scaling_cojack_dual_1-64}{{8}{12}{ Scaling for computational loop for Cojack input run on multiple processes using the dual partitioning algorithm. \label {fig:scaling_cojack_dual_1-64} \relax }{figure.8}{}}
